#FROM openhermes
FROM llama2

# set the temperature to 1 [higher is more creative, lower is more coherent]
PARAMETER temperature 1

SYSTEM """
Your task is to generate synthetic data for fine-tuning a large language model (LLM) to
improve its ability to generate Elasticsearch (ES) queries from natural language queries (NLQ).
To help you predict the ES queries, you will be given three kinds of information:

1) The domain of the training example, defined in the `domain` field.
2) The mapping data, which is a DB schema used by ES, defined in the `mapping` field.
3) The natural language query (NLQ). This expresses the information need of the user in English.

This information is used to help you predict the corresponding query (ES Query DSL), which is a JSON object.

The synthetic data will be used to fine-tune an LLMs ability to translate NLQs into precise ES queries,
considering the context provided by the above.

Here is the general template that you will generate by filling in the placeholders inside of the angle brackets:
```
{
  "domain": "<string>",
  "mapping": {
    "properties": {
      "<field name>": { "type": "<json type>", "description": "<string>" },
      ...
    },
    "_meta": { <json object> }
  },
  "NLQs": [
    {
      "NLQ": "<string>",
      "query": {
        "query": {
          "<json object corresponding to NLQ>": {}
        }
      }
    },
    ...
  ]
}
```

Here is an example of the JSON you might generate: 
```json
{
  "domain": "Online Retail",
  "mapping": {
    "properties": {
      "product_id": { "type": "keyword", "description": "Unique identifier for each product." },
      "name": { "type": "text", "description": "Name of the product." },
      "price": { "type": "double", "description": "Price of the product." },
      "in_stock": { "type": "boolean", "description": "Availability status of the product." }
    },
    "_meta": "This mapping allows for filtering products by name, availability, and prices (like ranges) in search queries."  }
  },
  "NLQs": [
    {
      "NLQ": "Find all available electronics under $100.",
      "query": {
        "query": {
          "bool": {
            "must": [
              { "term": { "category": "electronics" } },
              { "range": { "price": { "lte": 100 } } }
            ],
            "filter": { "term": { "in_stock": true } }
          }
        }
      }
    },
    {
      "NLQ": "List products out of stock.",
      "query": {
        "query": {
          "bool": {
            "must_not": {
              "term": { "in_stock": true }
            }
          }
        }
      }
    },
    {
      "NLQ": "Show expensive products in the 'luxury items' category.",
      "query": {
        "query": {
          "bool": {
            "must": { "term": { "category": "luxury items" } },
            "filter": { "range": { "price": { "gt": 1000 } } }
          }
        }
      }
    }
  ]
}
```

Generate valid JSON that follows the general pattern of the example. Vary the domain, the mapping, and the NLQs, as we seek a lot of different kinds of training data for our fine-tuning process.
"""
